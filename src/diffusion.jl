using Random, Statistics, Zygote, NNlib, Tullio, LoopVectorization

"Relu Activation function"
relu(x::AbstractArray) = max.(x, zero(eltype(x)))
relu(x::Number)        = max(x, zero(x))

"Glorot/Xavier uniform initialization: W·µ¢‚±º ~ U[-‚àö(6/(m+n)), ‚àö(6/(m+n))] via https://proceedings.mlr.press/v9/glorot10a/glorot10a.pdf"
glorot(m, n) = rand(Float32, m, n) .* (2f0*sqrt(6f0/(m+n))) .- sqrt(6f0/(m+n))
"Glorot/Xavier for convolution"
glorot(w, h, c_in, c_out) = (rand(Float32, w, h, c_in, c_out) .* 2f0 .- 1f0) .* sqrt(6f0 / (w * h * (c_in + c_out)))

@kwdef struct DDPM
    W‚ÇÅ = glorot(3, 3, 1, 16)
    b‚ÇÅ = zeros(Float32, 1, 1, 16, 1)
    W‚ÇÇ = glorot(3, 3, 16, 32)
    b‚ÇÇ = zeros(Float32, 1, 1, 32, 1)
    W‚ÇÉ = glorot(3, 3, 32, 16)
    b‚ÇÉ = zeros(Float32, 1, 1, 16, 1)
    W‚ÇÑ = glorot(3, 3, 16, 1)
    b‚ÇÑ = zeros(Float32, 1, 1, 1, 1)
    W‚Çú = reshape(glorot(16, 1), 1, 1, 16, 1)
end

"model's forward process: ŒµÃÇ = œµŒ∏(xt,t)"
function forward(m::DDPM, x, t, time_embedding)
    H, W = size(x)
    h = reshape(x, H, W, 1, 1)
    padding = (size(m.W‚ÇÅ, 1) - 1) √∑ 2

    # Layer 1 with time embedding injection
    h = conv(h, m.W‚ÇÅ; pad=padding) .+ m.b‚ÇÅ .+ m.W‚Çú .* time_embedding[t]
    h = relu(h)

    # Layer 2
    h = conv(h, m.W‚ÇÇ; pad=padding) .+ m.b‚ÇÇ
    h = relu(h)

    # Layer 3
    h = conv(h, m.W‚ÇÉ; pad=padding) .+ m.b‚ÇÉ
    h = relu(h)
    
    # Layer 4 (Final layer)
    h = conv(h, m.W‚ÇÑ; pad=padding) .+ m.b‚ÇÑ
    
    return reshape(h, H, W)
end

noise(x) = randn(eltype(x), size(x))
"The entire noise variance schedule via Œ≤_t = Œ≤_min + (Œ≤_max - Œ≤_min) * (t-1)/(T-1)"
noise_schedule(T; Œ≤min=1f-4, Œ≤max=0.02f0) = range(Œ≤min, Œ≤max; length=T)
"Entire signal variance schedule: Œ±_t = 1 - Œ≤_t"
signal_schedule(Œ≤::AbstractRange) = 1 .- Œ≤
"the total remaining signal variance is the cumprod of the signal_schedule"
remaining_signal(Œ±::AbstractRange) = cumprod(Œ±)
"Log Signal to Noise Ratio"
snr(Œ±ÃÑ) = log.(Œ±ÃÑ ./ (1 .- Œ±ÃÑ))
"Conditional marginal mean E[x‚Çú | x‚ÇÄ] for the forward diffusion process q(x‚Çú | x‚ÇÄ)"
marginal_mean(x, Œ±ÃÑ, t) = sqrt(Œ±ÃÑ[t]) .* x
"Conditional marginal noise for the forward diffusion marginal q(x‚Çú | x‚ÇÄ). This is the random Gaussian noise part added to the deterministic mean ‚àöŒ±ÃÑ‚Çú ¬∑ x‚ÇÄ."
marginal_noise(Œ±ÃÑ, t, Œµ) = sqrt(1-Œ±ÃÑ[t]).*Œµ
"Forward noise sample q(x_t | x_0) = sqrt(Œ±ÃÑ_t) * x_0 + sqrt(1 - Œ±ÃÑ_t) * Œµ, with Œµ ~ N(0, I)"
noised_sample(x‚ÇÄ, Œ±ÃÑ, t, Œµ) = marginal_mean(x‚ÇÄ, Œ±ÃÑ, t) .+ (sqrt(1-Œ±ÃÑ[t]) .* Œµ)
"Mean boxd Error (MSE) loss used for DDPM training: L‚Çõ·µ¢‚Çò‚Çö‚Çó‚Çë(Œ∏) := ùêÑ‚Çú,‚Çì‚ÇÄ,œµ ‚Äñœµ ‚àí œµŒ∏(‚àöŒ±ÃÑ‚Çú¬∑x‚ÇÄ + ‚àö(1‚àíŒ±ÃÑ‚Çú)¬∑œµ, t)‚Äñ¬≤"
loss(Œ∏::DDPM, x, t, y, time_embedding) = mean((y .- forward(Œ∏, x, t, time_embedding)).^2)
"Stochastic Gradient Descent (SGD). m, ‚àá, Œ∑ are mlp_parameters, gradients, and learning rate respectively"
function sgd!(m::DDPM, ‚àá, Œ∑)
    for p in propertynames(m)
        getproperty(m, p) .-= Œ∑ .* getproperty(‚àá, p)
    end
end

"Performs one training step: adds noise x‚Çú = ‚àöŒ±ÃÑ‚Çú¬∑x‚ÇÄ + ‚àö(1‚àíŒ±ÃÑ‚Çú)¬∑Œµ and updates model by gradient of the loss (ŒµÃÇ, Œµ)"
function step!(m::DDPM, x‚ÇÄ, Œ±ÃÑ, T, time_embedding; t=rand(1:T), Œ∑=1e-3f0)
    Œµ  = noise(x‚ÇÄ)
    xt = noised_sample(x‚ÇÄ, Œ±ÃÑ, t, Œµ)
    (‚àá,) = gradient(Œ∏ -> loss(Œ∏, xt, t, Œµ, time_embedding), m)
    sgd!(m, ‚àá, Œ∑)
    return m
end

"Computes Œº‚Çú = (x‚Çú ‚àí (Œ≤‚Çú / ‚àö(1‚àíŒ±ÃÑ‚Çú))¬∑ŒµÃÇ) / ‚àöŒ±‚Çú for the reverse diffusion mean"
posterior_mean(x, ŒµÃÇ, Œ≤, Œ±, Œ±ÃÑ, t) = (x .- (Œ≤[t]/sqrt(1-Œ±ÃÑ[t])) .* ŒµÃÇ) ./ sqrt(Œ±[t])

"Draws a sample x‚Çú‚Çã‚ÇÅ ~ Œº + ‚àöŒ≤‚Çú ¬∑ N(0, I) from the reverse diffusion step"
latent(Œº, Œ≤, t, x) = Œº .+ sqrt(Œ≤[t]) .* randn(eltype(x), size(x))

"Generates ~x0 by iteratively sampling x‚Çú‚Çã‚ÇÅ = Œº‚Çú(x‚Çú, ŒµÃÇ) + ‚àöŒ≤‚Çú¬∑z for t = T,‚Ä¶,0, starting from x_T ~ N(0,I). "
function reverse_sample(m::DDPM, Œ≤, Œ±, Œ±ÃÑ, T, d, time_embedding)
    H = W = isqrt(d)
    x = randn(Float32, H, W)
    Œº = similar(x)
    for t in T:-1:2
        ŒµÃÇ = forward(m, x, t, time_embedding)
        Œº = posterior_mean(x, ŒµÃÇ, Œ≤, Œ±, Œ±ÃÑ, t)
        x = latent(Œº, Œ≤, t, x)
    end
    
    t = 1
    ŒµÃÇ = forward(m, x, t, time_embedding)
    posterior_mean(x, ŒµÃÇ, Œ≤, Œ±, Œ±ÃÑ, t)
end

function reverse_samples(m::DDPM, Œ≤, Œ±, Œ±ÃÑ, T, d, time_embedding, N)                                                                                                                             
    samples = Vector{Matrix{Float32}}(undef, N)                                                                     
     Threads.@threads for i in eachindex(samples)                                                                   
        samples[i] = reverse_sample(m, Œ≤, Œ±, Œ±ÃÑ, T, d, time_embedding)                                              
     end                                                                                                            
    return samples                                                                                                  
end 

"Trains the diffusion model over the dataset by repeatedly applying one training step"
train!(model::DDPM, Œ±ÃÑ, T, Œ∑, dataset, time_embedding) = foldl((m, x‚ÇÄ) -> step!(m, x‚ÇÄ, Œ±ÃÑ, T, time_embedding; Œ∑=Œ∑), dataset; init=model)
# "Trains for E epochs by folding `train(model, Œ±ÃÑ, T, Œ∑, dataset)` over epochs: m‚Çë = foldl((m,_)->train(m, Œ±ÃÑ, T, Œ∑, dataset), 1:E; init=model)"
# train(model, Œ±ÃÑ, T, Œ∑, dataset, epochs) = foldl((m, _) -> train(m, Œ±ÃÑ, T, Œ∑, dataset), 1:epochs; init=model)

"Creates an h√ów zero matrix for a blank image"  
img(h, w) = zeros(Int, h, w)
"Return the integer radius given a diameter"
iradius(d::Integer) = isodd(d) ? (d - 1) √∑ 2 : d √∑ 2
"Return index ranges for rows and columns centered at (i, j) with given diameter"
center_range(i::Integer, d::Integer) = i-iradius(d):i+iradius(d)
"Paints a blocksize√óblocksize block of 255s centered at (i, j) into an image (mutates)"
addbox!(img, i, j, d) = img[center_range(i, d), center_range(j, d)] .= 255
"Generates an h√ów image with a d√ód white box at (i, j)"
box(h, w, i, j, d) = addbox!(img(h, w), i, j, d)
"Return the interior range excluding r pixels from each border (1+r:h-r)"
interior(n::Integer, d::Integer) = 1+iradius(d):n-iradius(d)
"Generates all possible unique boxes on a black background"
boxes(h, w, d) = [box(h, w, i, j, d) for i in interior(h, d) for j in interior(w, d)]
"Scales an image (array) from [0,255] to [-1,1] via y = (2/255)*x - 1"
scale(img::AbstractMatrix) = (2 .* Float32.(img) ./ 255) .- 1
"Scales a vector of images by mapping `scale` over elements"
scale(imgs::AbstractVector) = map(scale, imgs)
